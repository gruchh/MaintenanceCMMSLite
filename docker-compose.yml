services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8091:80"
    depends_on:
      api-codegen:
        condition: service_completed_successfully
      backend:
        condition: service_started
    networks:
      - app-network

  api-codegen:
    image: openapitools/openapi-generator-cli:v7.7.0
    working_dir: /local
    volumes:
      - ./frontend:/local
    networks:
      - app-network
    depends_on:
      - backend
    command: >
      sh -c "
        until wget -q --spider http://backend:8080/v3/api-docs; do
          echo 'Backend nie jest jeszcze gotowy, ponawiam próbę za 2 sekundy...'
          sleep 2
        done &&
        echo 'Backend jest gotowy. Generowanie klienta API...' &&
        /usr/local/bin/docker-entrypoint.sh generate -i http://backend:8080/v3/api-docs -o /local/src/app/core/api/generated -g typescript-angular --additional-properties=withInterfaces=true,providedInRoot=true,enumPropertyNaming=original
      "

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:17
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data: